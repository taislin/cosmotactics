name: Build and Release

on:
    push:
        branches:
            - main
            - master
        paths:
            - "**.js"
            - "**.html"
            - "**.json"
            - "**.css"
            - ".github/workflows/release.yml"
    workflow_dispatch:
        inputs:
            bump_level:
                description: "Which version number to bump?"
                required: true
                default: "patch"
                type: choice
                options:
                    - patch
                    - minor
                    - major

jobs:
    create-release: # Renamed job for clarity
        # Don't run on commits made by this workflow to prevent loops
        if: "!contains(github.event.head_commit.message, 'chore(release):')"
        runs-on: ubuntu-latest
        permissions:
            contents: write # Needed to push commits and tags

        steps:
            - name: Checkout Code
              uses: actions/checkout@v4
              with:
                  # We need to fetch all history and tags to find the latest version
                  fetch-depth: 0
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20"

            - name: Configure Git
              run: |
                  git config --global user.name 'GitHub Actions Bot'
                  git config --global user.email 'github-actions-bot@users.noreply.github.com'

            - name: Determine Bump Level
              id: bump_level
              run: |
                  # Use the manually dispatched level, or default to 'patch' for push events
                  BUMP_LEVEL=${{ github.event.inputs.bump_level || 'patch' }}
                  echo "BUMP_LEVEL=$BUMP_LEVEL" >> $GITHUB_ENV
                  echo "Bumping version by: $BUMP_LEVEL"

            - name: Get latest SemVer tag
              id: get_latest_tag
              run: |
                  # This command gets the latest tag that looks like a version number (vX.Y.Z)
                  # It handles the case where no tags exist by defaulting to v0.0.0
                  LATEST_TAG=$(git describe --tags --abbrev=0 --match "v[0-9]*" 2>/dev/null || echo "v0.0.0")
                  echo "Latest semantic tag found: $LATEST_TAG"
                  echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

            - name: Bump version from tag
              id: bump_version
              run: |
                  # Remove the 'v' prefix to work with version bumping
                  VERSION=$(echo "${{ steps.get_latest_tag.outputs.latest_tag }}" | sed 's/^v//')

                  # Split version into parts
                  MAJOR=$(echo $VERSION | cut -d. -f1)
                  MINOR=$(echo $VERSION | cut -d. -f2)
                  PATCH=$(echo $VERSION | cut -d. -f3)

                  # Bump the specified part
                  if [ "${{ env.BUMP_LEVEL }}" == "major" ]; then
                    MAJOR=$((MAJOR + 1))
                    MINOR=0
                    PATCH=0
                  elif [ "${{ env.BUMP_LEVEL }}" == "minor" ]; then
                    MINOR=$((MINOR + 1))
                    PATCH=0
                  else # patch
                    PATCH=$((PATCH + 1))
                  fi

                  NEW_VERSION="$MAJOR.$MINOR.$PATCH"
                  echo "New version will be: $NEW_VERSION"
                  echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

            - name: Update package.json
              run: |
                  # Update the version in package.json using node for cross-platform safety
                  node -e "let pkg = require('./package.json'); pkg.version = '${{ steps.bump_version.outputs.new_version }}'; require('fs').writeFileSync('./package.json', JSON.stringify(pkg, null, 4));"
                  echo "Updated package.json to version ${{ steps.bump_version.outputs.new_version }}"

            - name: Commit and Tag
              run: |
                  NEW_VERSION=${{ steps.bump_version.outputs.new_version }}
                  # Add the changed package.json to the commit
                  git add package.json
                  # Commit the version bump
                  git commit -m "chore(release): bump version to v$NEW_VERSION"
                  # Create the new tag
                  git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"

            - name: Push Changes and Tags
              run: git push --follow-tags
