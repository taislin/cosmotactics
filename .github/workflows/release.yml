name: Build and Release

on:
    # 1. Automatic trigger for patch releases when merging to main
    push:
        branches:
            - main
            - master
    # 2. Manual trigger for major/minor/patch releases
    workflow_dispatch:
        inputs:
            bump_level:
                description: "Which version number to bump?"
                required: true
                default: "patch"
                type: choice
                options:
                    - patch
                    - minor
                    - major

jobs:
    # Job 1: Bump the version in package.json and create a git tag
    bump-version:
        # Don't run this workflow on commits made by the workflow itself
        if: "!contains(github.event.head_commit.message, 'chore(release):')"
        runs-on: ubuntu-latest
        # --- ADD THIS PERMISSIONS BLOCK ---
        permissions:
            contents: write
        # ------------------------------------
        outputs:
            new_version: ${{ steps.get_version.outputs.version }}

        steps:
            - name: Checkout Code
              uses: actions/checkout@v4
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20"

            - name: Configure Git
              run: |
                  git config --global user.name 'GitHub Actions Bot'
                  git config --global user.email 'github-actions-bot@users.noreply.github.com'

            - name: Determine Bump Level
              id: bump_level
              run: |
                  # If triggered manually, use the input. Otherwise, default to patch.
                  BUMP_LEVEL=${{ github.event.inputs.bump_level || 'patch' }}
                  echo "BUMP_LEVEL=$BUMP_LEVEL" >> $GITHUB_ENV

            - name: Bump Version and Create Tag
              run: |
                  # The `npm version` command increments the version, commits, and tags.
                  npm version ${{ env.BUMP_LEVEL }} -m "chore(release): bump version to %s"

            - name: Push Changes and Tags
              run: git push --follow-tags

            - name: Get New Version
              id: get_version
              run: |
                  # Read the newly bumped version from package.json and set it as an output
                  echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

    # Job 2: Build the app on all platforms and upload to the release
    build-and-release:
        # This job depends on the bump-version job finishing successfully
        needs: bump-version
        strategy:
            matrix:
                os: [ubuntu-latest, macos-latest, windows-latest]
        runs-on: ${{ matrix.os }}
        # --- Also add permissions here for creating the release ---
        permissions:
            contents: write
        # --------------------------------------------------------

        steps:
            - name: Check out repository
              uses: actions/checkout@v4

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20"

            # This step is commented out because you have no index.neutralino.html file
            # - name: Prepare Neutralino HTML entry point
            #   run: mv index.neutralino.html index.html

            - name: Install Neutralinojs CLI
              run: npm install -g @neutralinojs/neu

            - name: Build Neutralinojs App
              run: neu build

            - name: Determine Platform-specific Details
              id: platform
              shell: bash
              run: |
                  if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
                    echo "ASSET_NAME=cosmotactics-windows-x64.zip" >> $GITHUB_ENV
                    echo "ASSET_PATH=./cosmotactics-win_x64.zip" >> $GITHUB_ENV
                    echo "ARCHIVE_CMD=zip -r cosmotactics-win_x64.zip ./dist/*" >> $GITHUB_ENV
                  elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
                    echo "ASSET_NAME=cosmotactics-macOS-x64.zip" >> $GITHUB_ENV
                    echo "ASSET_PATH=./cosmotactics-mac_x64.zip" >> $GITHUB_ENV
                    echo "ARCHIVE_CMD=zip -r cosmotactics-mac_x64.zip ./dist/*" >> $GITHUB_ENV
                  else
                    echo "ASSET_NAME=cosmotactics-linux-x64.zip" >> $GITHUB_ENV
                    echo "ASSET_PATH=./cosmotactics-linux_x64.zip" >> $GITHUB_ENV
                    echo "ARCHIVE_CMD=zip -r cosmotactics-linux_x64.zip ./dist/*" >> $GITHUB_ENV
                  fi

            - name: Package application for release
              run: ${{ env.ARCHIVE_CMD }}

            - name: Create or Get GitHub Release
              id: release_manager
              uses: joutvhu/get-release@v1
              if: matrix.os != 'ubuntu-latest' # Run on all but the release creator
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: v${{ needs.bump-version.outputs.new_version }}

            - name: Create GitHub Release (only on Linux job)
              id: create_release
              if: matrix.os == 'ubuntu-latest' # Run only on one job to avoid race conditions
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: v${{ needs.bump-version.outputs.new_version }}
                  release_name: CosmoTactics v${{ needs.bump-version.outputs.new_version }}
                  body: "Automated multi-platform release. Triggered by commit ${{ github.sha }}."
                  draft: false
                  prerelease: false

            - name: Upload Release Asset
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  # Use the upload_url from the creation step, or the one fetched by other jobs
                  upload_url: ${{ steps.create_release.outputs.upload_url || steps.release_manager.outputs.upload_url }}
                  asset_path: ${{ env.ASSET_PATH }}
                  asset_name: ${{ env.ASSET_NAME }}
                  asset_content_type: application/zip
